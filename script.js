

const firebaseConfig = {
  apiKey: "AIzaSyCQTk07tMT8y7tYH0Tcz3xV747rJKBmfIE",
  authDomain: "grandstep-2e1d8.firebaseapp.com",
  projectId: "grandstep-2e1d8",
  storageBucket: "grandstep-2e1d8.firebasestorage.app",
  messagingSenderId: "307286256573",
  appId: "1:307286256573:web:3d4ecaf42690e0da2c40d4",
  measurementId: "G-5VYW104YG6"
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞
        console.log("üöÄ Script.js –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ");

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Firebase
        if (typeof firebase === 'undefined') {
            console.error("‚ùå Firebase –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ CDN —Å—Å—ã–ª–∫–∏.");
            showAuthMessage("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Firebase. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.", "error");
        } else {
            console.log("‚úÖ Firebase –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ");
            
            try {
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase
                firebase.initializeApp(firebaseConfig);
                console.log("‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ");
                
                // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–µ—Ä–≤–∏—Å—ã
                const auth = firebase.auth();
                const db = firebase.firestore();
                
                console.log("‚úÖ –°–µ—Ä–≤–∏—Å—ã Firebase –¥–æ—Å—Ç—É–ø–Ω—ã");
                
                // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                let currentUser = null;
                let selectedDate = null;
                let selectedClass = null;
                let currentMonth = new Date().getMonth();
                let currentYear = new Date().getFullYear();
                let classesByDate = {};

                // –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                function showAuthMessage(message, type) {
                    console.log(`[AUTH ${type}] ${message}`);
                    const messageDiv = document.getElementById('auth-message');
                    if (messageDiv) {
                        messageDiv.textContent = message;
                        messageDiv.className = message ${type};
                    }
                }

                // –§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞
                function login() {
                    console.log("üîê –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ login");
                    
                    const email = document.getElementById('email').value;
                    const password = document.getElementById('password').value;
                    
                    console.log("–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", {email, password});
                    
                    if (!email || !password) {
                        showAuthMessage("–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å", "error");
                        return;
                    }
                    
                    showAuthMessage("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥...", "success");
                    
                    auth.signInWithEmailAndPassword(email, password)
                        .then((userCredential) => {
                            console.log("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:", userCredential.user);
                            showAuthMessage("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!", "success");
                        })
                        .catch((error) => {
                            console.error("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error);
                            let errorMessage = "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ";
                            
                            switch(error.code) {
                                case 'auth/invalid-email':
                                    errorMessage += "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email";
                                    break;
                                case 'auth/user-disabled':
                                    errorMessage += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω";
                                    break;
                                case 'auth/user-not-found':
                                    errorMessage += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
                                    break;
                                case 'auth/wrong-password':
                                    errorMessage += "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å";
                                    break;
                                default:
                                    errorMessage += error.message;
                            }
                            
                            showAuthMessage(errorMessage, "error");
                        });
                }

                // –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                function signup() {
                    console.log("üìù –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ signup");


const email = document.getElementById('email').value;
                    const password = document.getElementById('password').value;
                    
                    if (!email || !password) {
                        showAuthMessage("–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å", "error");
                        return;
                    }
                    
                    if (password.length < 6) {
                        showAuthMessage("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤", "error");
                        return;
                    }
                    
                    showAuthMessage("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...", "success");
                    
                    auth.createUserWithEmailAndPassword(email, password)
                        .then((userCredential) => {
                            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ Firestore
                            return db.collection('users').doc(userCredential.user.uid).set({
                                email: email,
                                createdAt: firebase.firestore.FieldValue.serverTimestamp()
                            });
                        })
                        .then(() => {
                            showAuthMessage("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", "success");
                        })
                        .catch((error) => {
                            console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
                            let errorMessage = "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ";
                            
                            switch(error.code) {
                                case 'auth/email-already-in-use':
                                    errorMessage += "Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è";
                                    break;
                                case 'auth/invalid-email':
                                    errorMessage += "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email";
                                    break;
                                case 'auth/operation-not-allowed':
                                    errorMessage += "–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞";
                                    break;
                                case 'auth/weak-password':
                                    errorMessage += "–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π";
                                    break;
                                default:
                                    errorMessage += error.message;
                            }
                            
                            showAuthMessage(errorMessage, "error");
                        });
                }

                // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
                function logout() {
                    auth.signOut()
                        .then(() => {
                            console.log("‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
                            showAuthMessage("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã", "success");
                        })
                        .catch((error) => {
                            console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", error);
                        });
                }

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                auth.onAuthStateChanged((user) => {
                    console.log("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ:", user);
                    if (user) {
                        currentUser = user;
                        console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:", user.email);
                        document.getElementById('auth-container').style.display = 'none';
                        document.getElementById('app-container').style.display = 'block';
                        initCalendar();
                    } else {
                        currentUser = null;
                        console.log("üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
                        document.getElementById('auth-container').style.display = 'block';
                        document.getElementById('app-container').style.display = 'none';
                    }
                });

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è


function initCalendar() {
                    renderCalendar(currentMonth, currentYear);
                    loadMonthClasses(currentMonth, currentYear);
                    
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
                    selectDate(new Date());
                }

                // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                function renderCalendar(month, year) {
                    const monthNames = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
                                       "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"];
                    
                    document.getElementById('current-month-year').textContent = ${monthNames[month]} ${year};
                    
                    const daysContainer = document.getElementById('calendar-days');
                    daysContainer.innerHTML = '';
                    
                    // –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
                    const firstDay = new Date(year, month, 1);
                    // –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
                    const lastDay = new Date(year, month + 1, 0);
                    // –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞ (0 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, ...)
                    const firstDayIndex = firstDay.getDay() === 0 ? 6 : firstDay.getDay() - 1;
                    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
                    const daysInMonth = lastDay.getDate();
                    
                    // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
                    const today = new Date();
                    const isCurrentMonth = today.getMonth() === month && today.getFullYear() === year;
                    
                    // –°–æ–∑–¥–∞–µ–º –¥–Ω–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
                    const prevMonthLastDay = new Date(year, month, 0).getDate();
                    for (let i = 0; i < firstDayIndex; i++) {
                        const day = document.createElement('div');
                        day.className = 'day other-month';
                        day.innerHTML = <div class="day-number">${prevMonthLastDay - firstDayIndex + i + 1}</div>;
                        daysContainer.appendChild(day);
                    }
                    
                    // –°–æ–∑–¥–∞–µ–º –¥–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
                    for (let i = 1; i <= daysInMonth; i++) {
                        const day = document.createElement('div');
                        day.className = 'day';
                        const date = new Date(year, month, i);
                        const dateStr = formatDate(date);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º
                        if (isCurrentMonth && i === today.getDate()) {
                            day.classList.add('today');
                        }
                        
                        day.innerHTML = <div class="day-number">${i}</div>;
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–Ω—è—Ç–∏—è –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
                        if (classesByDate[dateStr] && classesByDate[dateStr].length > 0) {
                            day.classList.add('has-classes');
                            const classPreview = classesByDate[dateStr][0];
                            day.innerHTML += <div class="class-preview">${classPreview.title}</div>;
                            
                            if (classesByDate[dateStr].length > 1) {
                                day.innerHTML += <div class="class-preview">+${classesByDate[dateStr].length - 1} –µ—â–µ</div>;
                            }
                        }
                        
                        day.addEventListener('click', () => selectDate(date));
                        daysContainer.appendChild(day);
                    }
                    
                    // –°–æ–∑–¥–∞–µ–º –¥–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
                    const totalCells = 42; // 6 –Ω–µ–¥–µ–ª—å * 7 –¥–Ω–µ–π
                    const remainingCells = totalCells - (firstDayIndex + daysInMonth);
                    for (let i = 1; i <= remainingCells; i++) {


const day = document.createElement('div');
                        day.className = 'day other-month';
                        day.innerHTML = <div class="day-number">${i}</div>;
                        daysContainer.appendChild(day);
                    }
                }

                // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –º–µ—Å—è—Ü
                function loadMonthClasses(month, year) {
                    const startDate = new Date(year, month, 1);
                    const endDate = new Date(year, month + 1, 0);
                    
                    console.log("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–Ω—è—Ç–∏–π —Å", startDate, "–ø–æ", endDate);
                    
                    db.collection('classes')
                        .where('date', '>=', startDate)
                        .where('date', '<=', endDate)
                        .get()
                        .then((querySnapshot) => {
                            classesByDate = {};
                            
                            querySnapshot.forEach((doc) => {
                                const classData = doc.data();
                                const classDate = classData.date.toDate();
                                const dateStr = formatDate(classDate);
                                
                                if (!classesByDate[dateStr]) {
                                    classesByDate[dateStr] = [];
                                }
                                
                                classesByDate[dateStr].push({
                                    id: doc.id,
                                    ...classData
                                });
                            });
                            
                            console.log("–ó–∞–Ω—è—Ç–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", classesByDate);
                            renderCalendar(currentMonth, currentYear);
                        })
                        .catch((error) => {
                            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–Ω—è—Ç–∏–π:', error);
                        });
                }

                // –í—ã–±–æ—Ä –¥–∞—Ç—ã
                function selectDate(date) {
                    selectedDate = date;
                    const dateStr = formatDate(date);
                    document.getElementById('selected-date').textContent = dateStr;
                    
                    const classesList = document.getElementById('classes-list');
                    classesList.innerHTML = '';
                    
                    if (classesByDate[dateStr] && classesByDate[dateStr].length > 0) {
                        classesByDate[dateStr].forEach((classData) => {
                            const classDate = classData.date.toDate();
                            const isFull = classData.currentParticipants >= classData.maxParticipants;
                            
                            const classItem = document.createElement('div');
                            classItem.className = 'class-item';
                            classItem.innerHTML = `
                                <h4>${classData.title}</h4>
                                <p>–í—Ä–µ–º—è: ${classDate.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</p>
                                <p>–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: ${classData.instructor}</p>
                                <p>–ú–µ—Å—Ç–∞: ${classData.currentParticipants}/${classData.maxParticipants}</p>
                                <button ${isFull ? 'disabled' : ''} onclick="openBookingModal('${classData.id}')">
                                    ${isFull ? '–ú–µ—Å—Ç –Ω–µ—Ç' : '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è'}
                                </button>
                            `;
                            
                            classesList.appendChild(classItem);
                        });
                    } else {
                        classesList.innerHTML = '<p>–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.</p>';
                    }
                    
                    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –¥–µ—Ç–∞–ª—è–º –¥–Ω—è
                    document.getElementById('day-details').


scrollIntoView({ behavior: 'smooth' });
                }

                // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
                function openBookingModal(classId) {
                    selectedClass = classId;
                    
                    db.collection('classes').doc(classId).get()
                        .then((doc) => {
                            if (!doc.exists) return;
                            
                            const classData = doc.data();
                            const modalInfo = document.getElementById('modal-class-info');
                            
                            modalInfo.innerHTML = `
                                <h3>${classData.title}</h3>
                                <p>–í—Ä–µ–º—è: ${classData.date.toDate().toLocaleString()}</p>
                                <p>–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: ${classData.instructor}</p>
                                <p>–ú–µ—Å—Ç–∞: ${classData.currentParticipants}/${classData.maxParticipants}</p>
                            `;
                            
                            document.getElementById('booking-modal').style.display = 'block';
                        })
                        .catch((error) => {
                            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–Ω—è—Ç–∏–∏:", error);
                        });
                }

                // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                function confirmBooking() {
                    if (!currentUser || !selectedClass) return;
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    db.collection('bookings')
                        .where('userId', '==', currentUser.uid)
                        .where('classId', '==', selectedClass)
                        .where('status', '==', 'confirmed')
                        .get()
                        .then((querySnapshot) => {
                            if (!querySnapshot.empty) {
                                alert('–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ!');
                                return;
                            }
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –º–µ—Å—Ç–∞
                            return db.collection('classes').doc(selectedClass).get();
                        })
                        .then((doc) => {
                            if (!doc.exists) return;
                            
                            const classData = doc.data();
                            if (classData.currentParticipants >= classData.maxParticipants) {
                                alert('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–µ—Å—Ç–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!');
                                return;
                            }
                            
                            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
                            const batch = db.batch();
                            
                            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                            const bookingRef = db.collection('bookings').doc();
                            batch.set(bookingRef, {
                                userId: currentUser.uid,
                                classId: selectedClass,
                                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                                status: 'confirmed'
                            });
                            
                            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                            const classRef = db.collection('classes').doc(selectedClass);
                            batch.update(classRef, {
                                currentParticipants: firebase.firestore.FieldValue.increment(1)
                            });
                            
                            return batch.commit();
                        })
                        .then(() => {
                            alert('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ!');
                            document.getElementById('booking-modal').style.display = 'none';


loadMonthClasses(currentMonth, currentYear); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                        })
                        .catch((error) => {
                            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:', error);
                            alert('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ: ' + error.message);
                        });
                }

                // –°–º–µ–Ω–∞ –º–µ—Å—è—Ü–∞
                function changeMonth(direction) {
                    currentMonth += direction;
                    
                    if (currentMonth < 0) {
                        currentMonth = 11;
                        currentYear--;
                    } else if (currentMonth > 11) {
                        currentMonth = 0;
                        currentYear++;
                    }
                    
                    renderCalendar(currentMonth, currentYear);
                    loadMonthClasses(currentMonth, currentYear);
                }

                // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É
                function goToToday() {
                    const today = new Date();
                    currentMonth = today.getMonth();
                    currentYear = today.getFullYear();
                    
                    renderCalendar(currentMonth, currentYear);
                    loadMonthClasses(currentMonth, currentYear);
                    selectDate(today);
                }

                // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
                function formatDate(date) {
                    return date.toLocaleDateString('ru-RU', {
                        day: '2-digit',
                        month: '2-digit',
                        year: 'numeric'
                    });
                }

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
                document.addEventListener('DOMContentLoaded', function() {
                    console.log("‚úÖ DOM –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω");
                    
                    // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
                    document.getElementById('login-btn').addEventListener('click', login);
                    document.getElementById('signup-btn').addEventListener('click', signup);
                    document.getElementById('logout-btn').addEventListener('click', logout);
                    document.getElementById('prev-month-btn').addEventListener('click', () => changeMonth(-1));
                    document.getElementById('next-month-btn').addEventListener('click', () => changeMonth(1));
                    document.getElementById('today-btn').addEventListener('click', goToToday);
                    document.getElementById('confirm-booking').addEventListener('click', confirmBooking);
                    
                    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                    document.querySelector('.close').addEventListener('click', function() {
                        document.getElementById('booking-modal').style.display = 'none';
                    });
                    
                    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
                    window.addEventListener('click', function(event) {
                        const modal = document.getElementById('booking-modal');
                        if (event.target === modal) {
                            modal.style.display = 'none';
                        }
                    });
                    
                    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ onclick
                    window.openBookingModal = openBookingModal;
                    
                    console.log("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω—ã");
                });

            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase:", error);
                showAuthMessage("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase: " + error.message, "error");
            }
        }

